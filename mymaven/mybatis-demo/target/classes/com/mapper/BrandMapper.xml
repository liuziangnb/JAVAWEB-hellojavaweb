<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace:名称空间
-->
<mapper namespace="com.Mapper.BrandMapper">

<!--数据库表的字段名称 和 实体类的属性名称 不一样，则不能自动封装数据
    *方案一：对不一样的列名起别名，让别名和实体类的属性名一样
    缺点：每次查询都要定义一次别名
    sql片段
            缺点：不灵活
===============================
     *resultMap：
     1.定义<resultMap>标签
     2.在<select>标签中，使用resultMap属性替换resultType属性
     -->
    <!--
    id:唯一标识
    type：映射的类型，支持别名
    -->

    <resultMap id="brandResultMap" type="com.Brand">
        <!--
        id：完成主键字段的映射
        column：列明
        property：属性名
        result：完成一般字段的映射
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName" />
    </resultMap>



    <!-- ***********************************************************************************************-->
        <select id="selectAll" resultMap="brandResultMap">
            select
            *
            from tb_brand;
        </select>



    <!--
    sql片段
    -->
<!--    <sql id="brand_column">-->
<!--        id,brand_name as brandName,company_name as companyName,ordered,description,status-->
<!--    </sql>-->

<!--    <select id="selectAll" resultType="com.Brand">-->
<!--        select-->
<!--            <include refid="brand_column" />-->
<!--        from tb_brand;-->

<!--    </select>-->

<!--    <select id="selectAll" resultType="com.Brand">-->
<!--    select * from tb_brand;-->
<!--    </select>-->



<!--    *参数占位符：
        1.#{}：会将起替换为？，为了防止SQL注入
        2.${}:拼sql，会存在SQL注入问题
            3.使用时机：
            *参数传递的时候：#{}
            *表明或者列明不固定的情况下：${} 会存在SQL注入问题

            *参数类型：parameterType：可以省略
            特殊字符处理：
            1.转义字符
            2.CDATA区

-->

<!--    <select id="selectById"  resultMap="brandResultMap">-->
<!--        select *-->
<!--        from tb_brand where id=#{id};-->

<!--    </select>-->

    <select id="selectById"  resultMap="brandResultMap">
        select *
        from tb_brand where id
        <![CDATA[
            <
        ]]>
        #{id};

    </select>


    <!--
        条件查询
    -->
<!--    <select id="selectByCondition" resultMap="brandResultMap">-->
<!--         select *-->
<!--         from tb_brand-->
<!--         where status = #{status}-->
<!--           and company_name like #{companyName}-->
<!--           and brand_name like #{brandName}-->
<!--     </select>-->




<!--动态条件查询
*if:条件判断
*test:逻辑表达式
*问题：
    *恒等式
    *<where>替换 where 关键字



-->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
                <if test="status !=null">
                    status=#{status}
                </if>

        <if test="companyName!=null and companyName!=''">
            and company_name like #{companyName}
        </if>

        <if test="brandName!=null and brandName!=''">
            and brand_name like #{brandName}
        </if>
        </where>
    </select>

    <select id="selectByConditionSingle" resultMap="brandResultMap">
<!--        select *-->
<!--        from tb_brand-->
<!--        where-->
<!--        <choose>   &lt;!&ndash;相当于switch&ndash;&gt;-->
<!--        <when test="status  !=  null">&lt;!&ndash;相当于case&ndash;&gt;-->
<!--            status=#{status}-->
<!--        </when>-->
<!--            <when test="companyName !=null and companyName !='' ">&lt;!&ndash;相当于case&ndash;&gt;-->
<!--                company_name like #{companyName}-->
<!--            </when>-->

<!--            <when test="brandName   !=  null and brandName  !=  ''">&lt;!&ndash;相当于case&ndash;&gt;-->
<!--                brand_name like #{brandName}-->
<!--            </when>-->
<!--            <otherwise>-->
<!--                1=1-->
<!--            </otherwise>-->

<!--        </choose>-->

        select *
        from tb_brand
        <where>
        <choose>   <!--相当于switch-->
            <when test="status  !=  null"><!--相当于case-->
                status=#{status}
            </when>
            <when test="companyName !=null and companyName !='' "><!--相当于case-->
                company_name like #{companyName}
            </when>

            <when test="brandName   !=  null and brandName  !=  ''"><!--相当于case-->
                brand_name like #{brandName}
            </when>

        </choose>
        </where>

    </select>

    <insert id="add" useGeneratedKeys="true" keyProperty="id">

        insert into tb_brand(brand_name, company_name, ordered, description, status)
        values (#{brandName},#{companyName},#{ordered},#{description},#{status});

    </insert>




    <update id="update">
        update tb_brand
        <set>
            <if test="brandName !=null and brandName !=''">
                brand_name=#{brandName},
            </if>
            <if test="brandName !=null and brandName !=''">
                company_name=#{companyName},
            </if>
            <if test="ordered !=null">
                ordered=#{ordered},
            </if>
            <if test="description !=null and description !=''">
                description=#{description},
            </if>
            <if test="status">
                status=#{status}
            </if>
        </set>
            where id=#{id};
    </update>






    <delete id="deleteById">
delete from tb_brand where id=#{id};
    </delete>
<!--    mybatis会将数组参数，封装成一个Nap集合
*默认：array=数组
*使用@param注解改变map集合的默认key的名称
-->


    <delete id="deleteByIds">

        delete from tb_brand where id
        in
            <foreach collection="array" item="id" separator="," open="(" close=")" >
                #{id}
            </foreach>
            ;
    </delete>

</mapper>